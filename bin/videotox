#!/usr/bin/env python3
import argparse
import subprocess
from pathlib import Path
from glob import glob
import sys

FORMAT_CODECS = {
    "m4v": ("libx264", "aac"),
    "mkv": ("libx264", "aac"),
    "mp4": ("libx264", "aac"),
    "mpg": ("mpeg2video", "mp2"),
    "webm": ("libvpx-vp9", "libvorbis"),
}

EXTRA_ARGS = {
    "m4v": ["-profile:v", "high", "-level", "4.0", "-movflags", "+faststart"],
}

VIDEO_EXTS = tuple(FORMAT_CODECS.keys())

def out_path(input_file: Path, fmt: str, output_dir: Path | None) -> Path:
    base = input_file.stem + f".{fmt}"
    return (output_dir / base) if output_dir else input_file.with_suffix(f".{fmt}")

def convert_one(input_file: Path, fmt: str, output_dir: Path | None, delete_original: bool) -> Path | None:
    vcodec, acodec = FORMAT_CODECS.get(fmt, (None, None))
    if not vcodec or not acodec:
        print(f"Unsupported output format: {fmt}")
        return None
    output_file = out_path(input_file, fmt, output_dir)
    if output_file.exists():
        print(f"Exists, skipped: {output_file}")
        return output_file
    cmd = [
              "ffmpeg",
              "-i", str(input_file),
              "-c:v", vcodec,
              "-c:a", acodec,
              "-crf", "18",
          ] + EXTRA_ARGS.get(fmt, []) + [str(output_file)]
    subprocess.run(cmd, check=True)
    if delete_original:
        input_file.unlink(missing_ok=True)
    return output_file

def list_inputs(path: Path) -> list[Path]:
    if path.is_file():
        return [path]
    if path.is_dir():
        files: list[Path] = []
        for ext in VIDEO_EXTS:
            files.extend(Path(p) for p in glob(str(path / f"**/*.{ext}"), recursive=True))
        return files
    print(f"Input not found: {path}")
    sys.exit(1)

def main() -> None:
    p = argparse.ArgumentParser(description="Convert video files with consistent quality.")
    p.add_argument("-i", "--input", required=True, help="Video file or directory")
    p.add_argument("-f", "--format", required=True, dest="fmt", help="Output format: " + ", ".join(FORMAT_CODECS))
    p.add_argument("-o", "--output-path", help="Output directory")
    p.add_argument("-d", "--delete", action="store_true", help="Delete original after conversion")
    args = p.parse_args()

    src = Path(args.input).expanduser().resolve()
    out_dir = Path(args.output_path).expanduser().resolve() if args.output_path else None
    if out_dir:
        out_dir.mkdir(parents=True, exist_ok=True)

    inputs = list_inputs(src)
    results = [convert_one(f, args.fmt, out_dir, args.delete) for f in inputs]
    done = [str(p) for p in results if p]
    if done:
        print("\n".join(f"Conversion complete: {x}" for x in done))

if __name__ == "__main__":
    main()
