#!/bin/bash

quality=28
codec=h264
remove=no
just_preview_compatible=no

function print_help() {
    echo "usage: $(basename "${0}") <video_file>"
    echo
    echo "options:"
    echo "  -c, --codec                 Codec can be one ofh264, h265 or av1, default: ${codec}"
    echo "  -q, --quality               Quality, the lower, the better the quality, default: ${quality}"
    echo "  --just-preview-compatible   Just convert with ffmpeg so that macOS preview can use this file"
    echo "  --rm-original               Remove the original file once the conversion is done"
}

for i in "$@"; do
  case $i in
    -h|--help)
      print_help
      exit 0
      ;;
    -q|--quality)
      shift
      quality="${1}"
      shift
      ;;
    -c|--codec)
      shift
      codec="${1}"
      shift
      ;;
    --rm-original)
      remove=yes
      shift
      ;;
    --just-preview-compatible)
      just_preview_compatible=yes
      shift
      ;;
    -*|--*)
      echo "Unknown option $i"
      print_help
      exit 1
      ;;
    *)
      ;;
  esac
done

if [[ ! -n "${1}" ]]; then
    print_help
    exit 1
fi

echo
echo "options:"
echo
echo "quality [${quality}]"
echo "codec [${codec}]"
echo "remove original: [${remove}]"
echo "just preview compatible: [${just_preview_compatible}] (ignoring quality and codec)"

input_file="${1}"
output_file="${input_file%.*}_compressed.mp4"

if test -f "${output_file}"; then
    echo "File ${input_file} has already been compressed"
    exit 1
fi

echo
echo "converting '${input_file}' to '${output_file}'"
echo

if [[ "${just_preview_compatible}" == "yes" ]]; then
    ffmpeg -i "${input_file}" -vcodec libx264 "${output_file}" 
else
    case "${codec}" in
        h264)
            ffmpeg -i "${input_file}" -vcodec libx264 -crf "${quality}" "${output_file}"
        ;;
        h265)
            ffmpeg -i "${input_file}" -vcodec libx265 -tag:v hvc1 -crf "${quality}" "${output_file}"
        ;;
        av1)
            ffmpeg -i "${input_file}" -c:v libaom-av1 -crf "${quality}" -b:v 0 -strict experimental "${output_file}"
        ;;
        *)
            echo "invalid codec '${codec}'"
            exit 1
        ;;
    esac
fi


[[ "${remove}" == "yes" ]] && test -f "${output_file}" && rm "${input_file}" && echo "removed input file '${input_file}'"
