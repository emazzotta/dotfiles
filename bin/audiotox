#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
from glob import glob

CODEC = {
    'aif': 'pcm_s16le',
    'aiff': 'pcm_s16le',
    'alac': 'alac',
    'flac': 'flac',
    'm4a': 'aac',
    'mp3': 'libmp3lame',
    'ogg': 'libvorbis',
    'wav': 'pcm_s16le',
}


def convert_audio(input_file, output_format, output_path, delete_original):
    filename, _ = os.path.splitext(os.path.basename(input_file))
    if output_path:
        output_file = f"{output_path}/{filename}.{output_format}"
    else:
        output_file = f"./{filename}.{output_format}"

    if os.path.exists(output_file):
        print(f"Output file '{output_file}' already exists, skipping...")
        return

    codec = CODEC.get(output_format)
    if not codec:
        print(f"Error: Unsupported output format '{output_format}'")
        sys.exit(1)
    command = ["ffmpeg", "-i", input_file, "-c:a", codec]
    if output_format == 'mp3':
        command.extend(["-q:a", "0"])
    command.append(output_file)
    subprocess.run(command, check=True)

    if delete_original:
        os.remove(input_file)
        print(f"Original file '{input_file}' deleted.")

    return output_file


def get_audio_files(directory):
    audio_files = []
    for extension in CODEC.keys():
        audio_files.extend(glob(f"{directory}/**/*.{extension}", recursive=True))
    return audio_files


def main():
    parser = argparse.ArgumentParser(description='Convert audio files.')
    parser.add_argument('-i', '--input', required=True, help='The audio file or directory of audio files to convert.')
    parser.add_argument('-f', '--format', required=True, dest='output_format',
                        help='The format of the output audio file.')
    parser.add_argument('-d', '--delete', action='store_true', help='Delete the original file(s) after conversion.')
    parser.add_argument('-o', '--output-path', help='Path where to save the converted file(s).')
    args = parser.parse_args()
    if os.path.isfile(args.input):
        input_files = [args.input]
    elif os.path.isdir(args.input):
        input_files = get_audio_files(args.input)
    else:
        print(f"Error: Input '{args.input}' not found!")
        sys.exit(1)

    converted_files = []
    for input_file in input_files:
        converted_files.append(convert_audio(input_file, args.output_format, args.output_path, args.delete))
    print('\n'.join([f"Conversion complete: '{x}'" for x in converted_files if x]))


if __name__ == "__main__":
    main()
