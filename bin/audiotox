#!/usr/bin/env python3
import argparse
import subprocess
from pathlib import Path
from glob import glob
import sys

AUDIO_CODECS = {
    "mp3": "libmp3lame",
    "m4a": "aac",
    "aac": "aac",
    "flac": "flac",
    "wav": "pcm_s16le",
    "aif": "pcm_s16le",
    "aiff": "pcm_s16le",
    "alac": "alac",
    "ogg": "libvorbis",
    "opus": "libopus",
    "wma": "wmav2",
}

EXTRA_ARGS = {
    "mp3": ["-b:a", "320k"],
    "m4a": ["-b:a", "256k"],
    "aac": ["-b:a", "256k"],
    "opus": ["-b:a", "128k"],
    "ogg": ["-q:a", "6"],
}

AUDIO_EXTS = ["mp3", "m4a", "aac", "flac", "wav", "aif", "aiff", "alac", "ogg", "opus", "wma", "ape", "wv"]


def get_output_path(input_file: Path, fmt: str, output_dir: Path | None) -> Path:
    base_name = input_file.stem
    ext = f".{fmt}"

    if output_dir:
        output_path = output_dir / f"{base_name}{ext}"
    else:
        output_path = input_file.parent / f"{base_name}{ext}"

    if output_path.exists():
        response = input(f"File exists: {output_path}\nOverwrite? [y/N/a] (N=add _converted, a=abort): ").lower()
        if response == 'a':
            sys.exit("Aborted")
        elif response != 'y':
            counter = ""
            while True:
                suffix = f"_converted{counter}"
                if output_dir:
                    output_path = output_dir / f"{base_name}{suffix}{ext}"
                else:
                    output_path = input_file.parent / f"{base_name}{suffix}{ext}"
                if not output_path.exists():
                    break
                counter = "_2" if not counter else f"_{int(counter[1:]) + 1}"

    return output_path


def convert_one(input_file: Path, fmt: str, output_dir: Path | None, delete_original: bool) -> Path | None:
    codec = AUDIO_CODECS.get(fmt)
    if not codec:
        print(f"Unsupported format: {fmt}")
        return None

    output_file = get_output_path(input_file, fmt, output_dir)

    cmd = [
              "ffmpeg",
              "-i", str(input_file),
              "-c:a", codec,
          ] + EXTRA_ARGS.get(fmt, []) + ["-y", str(output_file)]

    try:
        subprocess.run(cmd, check=True, capture_output=True)
        print(f"Converted: {input_file} -> {output_file}")
        if delete_original:
            input_file.unlink(missing_ok=True)
        return output_file
    except subprocess.CalledProcessError:
        print(f"Failed: {input_file}")
        return None


def list_inputs(path: Path) -> list[Path]:
    if path.is_file():
        return [path]
    if path.is_dir():
        files = []
        for ext in AUDIO_EXTS:
            files.extend(Path(p) for p in glob(str(path / f"**/*.{ext}"), recursive=True))
            files.extend(Path(p) for p in glob(str(path / f"**/*.{ext.upper()}"), recursive=True))
        return sorted(set(files))
    print(f"Input not found: {path}")
    sys.exit(1)


def main():
    p = argparse.ArgumentParser(description="Convert audio files")
    p.add_argument("-i", "--input", required=True, help="Audio file or directory")
    p.add_argument("-f", "--format", required=True, dest="fmt",
                   choices=AUDIO_CODECS.keys(), help="Output format")
    p.add_argument("-o", "--output-path", help="Output directory")
    p.add_argument("-d", "--delete", action="store_true", help="Delete original after conversion")
    args = p.parse_args()

    src = Path(args.input).expanduser().resolve()
    out_dir = Path(args.output_path).expanduser().resolve() if args.output_path else None
    if out_dir:
        out_dir.mkdir(parents=True, exist_ok=True)

    inputs = list_inputs(src)
    if not inputs:
        print("No audio files found")
        sys.exit(1)

    results = []
    for f in inputs:
        result = convert_one(f, args.fmt, out_dir, args.delete)
        if result:
            results.append(result)

    if results:
        print(f"\nConverted {len(results)} file(s)")


if __name__ == "__main__":
    main()
