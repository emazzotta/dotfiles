#!/usr/bin/env python3

import argparse
import hashlib
import sys
import os

def list_supported_algorithms():
    """List all supported hash algorithms."""
    print("Supported hash algorithms are:", ', '.join(sorted(hashlib.algorithms_available)))

def hash_data(algorithm, data):
    """Hash data using the specified algorithm."""
    try:
        hasher = hashlib.new(algorithm)
        hasher.update(data.encode('utf-8'))
        return hasher.hexdigest()
    except ValueError:
        print(f"Error: Unsupported algorithm '{algorithm}'")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Hash text or file content using specified algorithm.")
    parser.add_argument('algorithm', type=str, nargs='?', help="The hash algorithm to use (required unless listing algorithms)")
    parser.add_argument('input', type=str, nargs='?', help="The input text or file path (required unless listing algorithms)")
    parser.add_argument('-f', '--file', action='store_true', help="Indicate the input should be treated as a file path")
    parser.add_argument('-l', '--list', action='store_true', help="List all supported algorithms")

    args = parser.parse_args()

    if args.list:
        list_supported_algorithms()
        return

    # After listing the algorithms, we should ensure that both algorithm and input are provided
    if not args.algorithm or not args.input:
        parser.print_usage()
        print("Error: 'algorithm' and 'input' are required unless using the --list option.")
        sys.exit(1)

    if args.file:
        if not os.path.isfile(args.input):
            print(f"Error: File not found: {args.input}")
            sys.exit(1)
        with open(args.input, 'r', encoding='utf-8') as file:
            file_content = file.read()
        hash_result = hash_data(args.algorithm, file_content)
        print(f"Hash of the file '{args.input}': {hash_result}")
    else:
        hash_result = hash_data(args.algorithm, args.input)
        print(f"Hash of the text: {hash_result}")

if __name__ == "__main__":
    main()
