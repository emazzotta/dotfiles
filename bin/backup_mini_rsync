#!/usr/bin/env python3

import os
import subprocess

SOURCE_DRIVE = "SanDisk_1TB"
EXCLUDE_DRIVES = ["Macintosh HD", ".timemachine", "com.apple.TimeMachine.localsnapshots"]
VOLUMES_PATH = "/Volumes"
RCLONE_FLAGS = [
    "-v",
    "--delete-during",
    "--progress",
    "--transfers", "2",
    "--checkers", "2",
    "--no-update-modtime",
    "--exclude", ".Spotlight-V100/**",
    "--exclude", ".fseventsd/**",
    "--exclude", ".TemporaryItems/**",
    "--exclude", ".Trashes/**"
]

def get_drive_space(path):
    statvfs = os.statvfs(path)
    total = (statvfs.f_blocks * statvfs.f_frsize) / (1024**3)
    free = (statvfs.f_bfree * statvfs.f_frsize) / (1024**3)
    used = total - free
    return total, used, free

def get_available_targets():
    drives = os.listdir(VOLUMES_PATH)
    return [d for d in drives if d not in EXCLUDE_DRIVES + [SOURCE_DRIVE]]

def display_space_details(path, label):
    total, used, free = get_drive_space(path)
    print(f"{label} - Total: {total:.2f} GB, Used: {used:.2f} GB, Free: {free:.2f} GB")

def select_target(targets):
    print("\nAvailable Targets:")
    for i, target in enumerate(targets, 1):
        target_path = os.path.join(VOLUMES_PATH, target)
        print(f"{i}. {target}")
        display_space_details(target_path, target)

    choice = -1
    while choice not in range(len(targets)):
        try:
            choice = int(input("\nEnter the number of your target: ")) - 1
            if choice < 0 or choice >= len(targets):
                print("Please enter a valid number from the list.")
        except ValueError:
            print("Invalid input. Please enter a number.")
    return os.path.join(VOLUMES_PATH, targets[choice])

def confirm_and_execute_rclone(source, target, rclone_command):
    print("\nSource Directory:", source)
    print("Target Directory:", target)
    print("Rclone Command:", ' '.join(rclone_command))
    proceed = input("Proceed with rclone? (y/N): ").strip().lower()
    if proceed == "y":
        subprocess.run(rclone_command)
    else:
        print("Rclone operation cancelled.")

def main():
    source = os.path.join(VOLUMES_PATH, SOURCE_DRIVE) + '/'
    targets = get_available_targets()

    print("Source Drive Space Details:")
    display_space_details(source, SOURCE_DRIVE)

    target = select_target(targets)
    rclone_command = ["rclone", "sync", source, target] + RCLONE_FLAGS

    confirm_and_execute_rclone(source, target, rclone_command)

if __name__ == "__main__":
    main()
