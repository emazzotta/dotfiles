#!/usr/bin/env python3

import os
import subprocess
from concurrent.futures import ThreadPoolExecutor
from os import listdir
from os.path import join, basename, isdir

VOLUMES_PATH = "/Volumes"
SOURCE_DRIVE = "SanDisk_1TB"
MAGIC_FOLDERS_TO_KEEP_DRILLING_FOR_SUBFOLDERS = ["Backup", "Google_Drive"]

EXCLUDE_DRIVES = [
    "Macintosh HD",
    ".timemachine",
    "com.apple.TimeMachine.localsnapshots"
]

EXCLUDE_FOLDERS = [
    ".Spotlight-V100",
    ".TemporaryItems",
    ".Trashes",
    ".fseventsd",
    ".tmp.driveupload",
]


def flatten(nested):
    flat_list = []
    for item in nested:
        if isinstance(item, list):  # Check if the item is a list
            flat_list.extend(flatten(item))  # Recurse if it's a list
        else:
            flat_list.append(item)  # Directly append if it's not a list
    return flat_list


RCLONE_FLAGS = [
    "-v",
    "--delete-during",
    "--progress",
    "--transfers", "2",
    "--checkers", "8",
    "--no-update-modtime",
    *(flatten(["--exclude", f"{folder}/**"] for folder in EXCLUDE_FOLDERS))
]

RSYNC_FLAGS = [
    "-avh",
    "--delete",
    "--progress",
    *(flatten(["--exclude", f"{folder}/"] for folder in EXCLUDE_FOLDERS))
]


def get_drive_space(path):
    statvfs = os.statvfs(path)
    total = (statvfs.f_blocks * statvfs.f_frsize) / (1024 ** 3)
    free = (statvfs.f_bfree * statvfs.f_frsize) / (1024 ** 3)
    used = total - free
    return total, used, free


def get_available_targets():
    drives = os.listdir(VOLUMES_PATH)
    return [d for d in drives if d not in EXCLUDE_DRIVES + [SOURCE_DRIVE]]


def display_space_details(path, label):
    print("Source Drive Space Details:")
    total, used, free = get_drive_space(path)
    print(f"{label} - Total: {total:.2f} GB, Used: {used:.2f} GB, Free: {free:.2f} GB")


def select_target(targets):
    print("\nAvailable Targets:")
    for i, target in enumerate(targets, 1):
        target_path = join(VOLUMES_PATH, target)
        print(f"{i}. {target}")
        display_space_details(target_path, target)

    choice = ""
    while choice not in range(len(targets)):
        try:
            choice = int(input("\nEnter the number of your target: ")) - 1
            if choice < 0 or choice >= len(targets):
                print(
                    f"Target '{choice + 1}' does not exist. Check available targets above.")
        except ValueError:
            print(f"Invalid input '{choice}'. Please enter a number.")
    return join(VOLUMES_PATH, targets[choice])


def confirm_and_execute_command(source, target, command, tool_name, parallel=False, subdirectories=None):
    print(f"\nSource Directory: {source}")
    print(f"Target Directory: {target}")

    if parallel and subdirectories:
        print("\nStarting parallel rsync processes...")
        parallel_rsync(subdirectories, source, target, tool_name)
        print("All rsync processes completed.")
        return
    else:
        print(f"{tool_name} Command: {' '.join(command)}")
        proceed = input(f"Proceed with {tool_name}? (y/N): ").strip().lower()
        if proceed == "y":
            subprocess.run(command)
        else:
            print(f"{tool_name} operation cancelled.")


def parallel_rsync(subdirectories, source_base, target_base, tool_name):
    def rsync_dir(subdir):
        source_path = join(source_base, subdir)
        target_path = join(target_base, subdir.replace(
            source_base, f"{target_base}/"))
        command = ["rsync"] + RSYNC_FLAGS + [f"{source_path}/", target_path]
        print(f"\n{tool_name} Command: {' '.join(command)}\n\n")
        subprocess.run(command)

    with ThreadPoolExecutor(max_workers=len(subdirectories)) as executor:
        executor.map(rsync_dir, subdirectories)


def process_backup_command_choice(source, target):
    choice = input(
        "Do you want to use rsync or rclone? (Default: rsync) r(S)ync/r(c)lone: ").strip().lower()
    if choice == "c":
        command = ["rclone", "sync", source, target] + RCLONE_FLAGS
        confirm_and_execute_command(source, target, command, "rclone")
    elif choice == "s" or choice == "":
        command = ["rsync"] + RSYNC_FLAGS + [source, target]

        subdirectories = find_subdirectories(source)
        if subdirectories:
            print("\nSubdirectories found for potential parallel rsync:")
            for i, subdir in enumerate(subdirectories, 1):
                print(f"{i}. {subdir}")

        parallel_choice = input(
            "Do you want to use parallel rsync? (y/N): ").strip().lower()
        if parallel_choice == "y" and subdirectories:
            print(f"\nProceeding with parallel rsync for each subdirectory")
            confirm_and_execute_command(
                source, target, command, "rsync", parallel=True, subdirectories=subdirectories)
        else:
            confirm_and_execute_command(source, target, command, "rsync")
    else:
        print("Invalid choice. Please select either 'rsync' or 'rclone'.\n")
        process_backup_command_choice(source, target)


def main():
    source = join(VOLUMES_PATH, SOURCE_DRIVE) + '/'
    targets = get_available_targets()
    display_space_details(source, SOURCE_DRIVE)
    target = select_target(targets)
    process_backup_command_choice(source, target)


def find_subdirectories(source):
    return flatten([
        join(source, subdir)
        if subdir not in MAGIC_FOLDERS_TO_KEEP_DRILLING_FOR_SUBFOLDERS
        else find_subdirectories(join(source, subdir))
        for subdir
        in listdir(source)
        if isdir(join(source, subdir)) and basename(subdir) not in EXCLUDE_FOLDERS
    ])


if __name__ == "__main__":
    main()
