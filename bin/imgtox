#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
from glob import glob

def convert_image(input_file, output_format, output_path, delete_original):
    filename, _ = os.path.splitext(os.path.basename(input_file))
    if output_path:
        output_file = os.path.join(output_path, f"{filename}.{output_format}")
    else:
        output_file = f"./{filename}.{output_format}"

    command = ["magick", "convert", input_file, output_file]
    result = subprocess.run(command, check=True)
    
    if result.returncode != 0:
        print(f"Error: Conversion failed for '{input_file}'")
        sys.exit(1)

    if delete_original:
        os.remove(input_file)
        print(f"Original file '{input_file}' deleted.")
    
    print(f"Conversion complete: {output_file}")

def get_image_files(directory):
    image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.gif', '*.bmp', '*.tiff', '*.webp', '*.svg']
    image_files = []
    for extension in image_extensions:
        image_files.extend(glob(os.path.join(directory, '**', extension), recursive=True))
    return image_files

def main():
    parser = argparse.ArgumentParser(description='Convert image files.')
    parser.add_argument('-i', '--input', required=True, help='The image file or directory of image files to convert.')
    parser.add_argument('-f', '--format', required=True, dest='output_format', help='The format of the output image file.')
    parser.add_argument('-d', '--delete', action='store_true', help='Delete the original file(s) after conversion.')
    parser.add_argument('-o', '--output-path', help='Path where to save the converted file(s).')
    args = parser.parse_args()

    if os.path.isfile(args.input):
        input_files = [args.input]
    elif os.path.isdir(args.input):
        input_files = get_image_files(args.input)
    else:
        print(f"Error: Input '{args.input}' not found!")
        sys.exit(1)

    for input_file in input_files:
        convert_image(input_file, args.output_format, args.output_path, args.delete)

if __name__ == "__main__":
    main()

