#!/usr/bin/env python3

import argparse
import os
import subprocess
from collections import defaultdict
from pathlib import Path


def generate_report(mp3_details, args):
    header = f"# MP3 File Analysis\n\n- Search Paths: {', '.join(args.search_path)}\n- Output Path: {args.output_path}\n\n"
    if not mp3_details:
        return header + "No MP3 files found or no duplicates detected."

    details_content = ""
    for stripped_name, details in mp3_details.items():
        if len(details) > 1:
            details_content += f"## Potential Versions of: {stripped_name}\n"
            details_content += "| Path Basename | Largest | Size | Path Dirname |\n|---|---|---|---|\n"

            details.sort(reverse=True)
            first = True
            for size, full_path in details:
                dir_name = os.path.dirname(full_path)
                base_name = os.path.basename(full_path)
                largest_tick = "X" if first else " "
                first = False
                details_content += f"| {base_name} | {largest_tick} | {size} | {dir_name} |\n"

            details_content += "\n"

    return header + details_content


def main():
    parser = argparse.ArgumentParser(description='Find potential duplicate MP3 files and generate a report.')
    parser.add_argument('search_path', nargs='+', help='Paths to search for MP3 files.')
    parser.add_argument('-o', '--output-path', default='.', help='Path to save the report file.')
    args = parser.parse_args()

    mp3_details = defaultdict(list)
    for search_path in args.search_path:
        for root, dirs, files in os.walk(search_path, followlinks=True):
            for file in files:
                if file.endswith('.mp3'):
                    full_path = os.path.join(root, file)
                    print(f"Processing {full_path}...")
                    base_name = os.path.basename(full_path)
                    stripped_name = base_name.rstrip('.mp3')
                    size = os.path.getsize(full_path)
                    mp3_details[stripped_name].append((size, full_path))

    report_content = generate_report(mp3_details, args)

    output_dir = Path(args.output_path)
    output_dir.mkdir(parents=True, exist_ok=True)
    md_file_path = os.path.join(args.output_path, 'report.md')
    with open(md_file_path, 'w') as md_file:
        md_file.write(report_content)
    print(f'Markdown report saved to {md_file_path}')


if __name__ == '__main__':
    main()
